name: CI/CD Pipeline

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    

permissions:
  id-token: write
  contents: write

env:
  DOCKER_IMAGE: 683432915883.dkr.ecr.us-east-1.amazonaws.com/currencyconverter
  DOCKER_USERNAME: AWS

jobs:
  test:
    runs-on: ubuntu-latest
    # env:
    #   APIHOST: ${{ secrets.APIHOST }}
    #   APIKEY: ${{ secrets.APIKEY }}
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4 # Or a specific version
        with:
          role-to-assume: arn:aws:iam::683432915883:role/GitHubActions-AWS
          aws-region: us-east-1
      - name: Get Secrets from AWS Secrets Manager
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            ,currencyconverter
          parse-json-secrets: true
      # - name: map to expected variable namespace
      #   run: |
      #     echo "APIHOST=$CURRENCYCONVERTER_APIHOST" >> $GITHUB_ENV
      #     echo "APIKEY=$CURRENCYCONVERTER_APIKEY" >> $GITHUB_ENV
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - run: python -m unittest discover -s tests

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      sha: ${{ steps.short-sha.outputs.sha }}
      docker_tags: ${{steps.docker-tags.outputs.tags}}
    steps:
      - uses: actions/checkout@v4
      - name: Get short SHA
        id: short-sha
        run: echo "::set-output name=sha::$(git rev-parse --short=7 ${{ github.sha }})"

      - name: Prepare Docker Tags
        id: docker-tags
        run: |
          COMMIT_SHA=${{ steps.short-sha.outputs.sha }}
          echo "COMMIT_SHA_TAG=$COMMIT_SHA" >> $GITHUB_ENV
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION_TAG=${GITHUB_REF/refs\/tags\//}
            echo "VERSION_TAG=$VERSION_TAG" >> $GITHUB_ENV
            TAGS="$VERSION_TAG,$COMMIT_SHA,latest"
          else
            TAGS="$COMMIT_SHA,latest"
          fi
          echo "DOCKER_IMAGE_TAGS=$TAGS" >> $GITHUB_ENV
          
  run_job_with_aws:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4 # Or a specific version
        with:
          role-to-assume: arn:aws:iam::683432915883:role/GitHubActions-AWS
          aws-region: us-east-1
      - name: Verify things are working
        run: |
          # Your commands that require AWS credentials
          aws sts get-caller-identity 
      - name: Build and Push Docker image
        run: |
          DOCKER_IMAGE=${{ env.DOCKER_IMAGE }}
          DOCKER_USERNAME=${{ env.DOCKER_USERNAME }}
          DOCKER_IMAGE_TAGS=${{needs.build-and-push.outputs.docker_tags}}

          # Log in to ECR
          aws ecr get-login-password --region us-east-1 | docker login --username "$DOCKER_USERNAME" --password-stdin "$DOCKER_IMAGE"

          # Build Docker image
          docker build -t $DOCKER_IMAGE .

          # Tag and Push Docker image for each determined tag
          IFS=',' read -ra TAGS <<< "$DOCKER_IMAGE_TAGS"
          for TAG in "${TAGS[@]}"; do
            docker tag $DOCKER_IMAGE $DOCKER_IMAGE:$TAG
            docker push $DOCKER_IMAGE:$TAG
          done
  update-deployment:
    needs: run_job_with_aws
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Update Deployment Image
        run: |
          git pull --rebase origin main
          IMAGE_TAG=${{ needs.build-and-push.outputs.sha }}
          sed -i 's|image: '${{ env.DOCKER_IMAGE }}':.*|image: '${{ env.DOCKER_IMAGE }}':'"$IMAGE_TAG"'|' k8s/base/deployment.yaml
          git add k8s/base/deployment.yaml
          git commit -m "Update image version to $IMAGE_TAG"
          git push

  #     - name: Install Argo CD CLI
  #       run: |
  #         curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
  #         chmod +x /usr/local/bin/argocd

  #     - name: Login to Argo CD
  #       run: |
  #         argocd login $ARGOCD_SERVER --username admin --password $ARGOCD_AUTH_TOKEN
  #       env:
  #         ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
  #         ARGOCD_AUTH_TOKEN: ${{ secrets.ARGOCD_AUTH_TOKEN }}

  #     - name: Sync Argo CD Application
  #       run: |
  #         argocd app sync $ARGOCD_APP_NAME
  #       env:
  #         ARGOCD_APP_NAME: currencyconverter-production


